{"version":3,"sources":["ng://ngx-bootstrap/collapse/collapse-animations.ts","ng://ngx-bootstrap/collapse/collapse.directive.ts","ng://ngx-bootstrap/collapse/collapse.module.ts"],"names":["expandAnimation","style","height","visibility","animate","collapseAnimation","CollapseDirective","_el","_renderer","_builder","this","collapsed","EventEmitter","collapses","expanded","expands","isExpanded","isCollapsed","isCollapse","isCollapsing","isAnimated","_display","_stylesLoaded","_COLLAPSE_ACTION_NAME","_EXPAND_ACTION_NAME","_factoryCollapseAnimation","build","_factoryExpandAnimation","Object","defineProperty","prototype","value","show","hide","setStyle","nativeElement","toggle","ngAfterViewChecked","_this","emit","animationRun","action","callback","addClass","factoryAnimation","_player","destroy","create","play","onDone","Directive","args","selector","exportAs","host","[class.collapse]","ElementRef","Renderer2","AnimationBuilder","Output","HostBinding","type","Input","CollapseModule","forRoot","ngModule","providers","NgModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\n  animate,\n  style,\n  AnimationMetadata\n} from '@angular/animations';\n\nexport const COLLAPSE_ANIMATION_TIMING = '400ms cubic-bezier(0.4,0.0,0.2,1)';\n\nexport const expandAnimation: AnimationMetadata[] = [\n  style({ height: 0, visibility: 'hidden' }),\n  animate(\n    COLLAPSE_ANIMATION_TIMING,\n    style({ height: '*', visibility: 'visible' })\n  )\n];\n\nexport const collapseAnimation: AnimationMetadata[] = [\n  style({ height: '*', visibility: 'visible' }),\n  animate(\n    COLLAPSE_ANIMATION_TIMING,\n    style({ height: 0, visibility: 'hidden' })\n  )\n];\n","import {\n  AnimationBuilder,\n  AnimationFactory,\n  AnimationPlayer\n} from '@angular/animations';\n\n// todo: add animations when https://github.com/angular/angular/issues/9947 solved\nimport {\n  AfterViewChecked,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  Output,\n  Renderer2\n} from '@angular/core';\n\nimport {\n  collapseAnimation,\n  expandAnimation\n} from './collapse-animations';\n\n@Directive({\n  selector: '[collapse]',\n  exportAs: 'bs-collapse',\n  host: {\n    '[class.collapse]': 'true'\n  }\n})\nexport class CollapseDirective implements AfterViewChecked {\n  /** This event fires as soon as content collapses */\n  @Output() collapsed: EventEmitter<CollapseDirective> = new EventEmitter();\n  /** This event fires when collapsing is started */\n  @Output() collapses: EventEmitter<CollapseDirective> = new EventEmitter();\n  /** This event fires as soon as content becomes visible */\n  @Output() expanded: EventEmitter<CollapseDirective> = new EventEmitter();\n  /** This event fires when expansion is started */\n  @Output() expands: EventEmitter<CollapseDirective> = new EventEmitter();\n\n  // shown\n  @HostBinding('class.in')\n  @HostBinding('class.show')\n  @HostBinding('attr.aria-expanded')\n  isExpanded = true;\n  // hidden\n  @HostBinding('attr.aria-hidden') isCollapsed = false;\n  // stale state\n  @HostBinding('class.collapse') isCollapse = true;\n  // animation state\n  @HostBinding('class.collapsing') isCollapsing = false;\n\n  @Input()\n  set display(value: string) {\n    if (!this.isAnimated) {\n      this._renderer.setStyle(this._el.nativeElement, 'display', value);\n\n      return;\n    }\n\n    this._display = value;\n\n    if (value === 'none') {\n      this.hide();\n\n      return;\n    }\n\n    this.show();\n  }\n  /** turn on/off animation */\n  @Input() isAnimated = false;\n  /** A flag indicating visibility of content (shown or hidden) */\n  @Input()\n  set collapse(value: boolean) {\n    this.isExpanded = value;\n    this.toggle();\n  }\n\n  get collapse(): boolean {\n    return this.isExpanded;\n  }\n\n  private _display = 'block';\n  private _factoryCollapseAnimation: AnimationFactory;\n  private _factoryExpandAnimation: AnimationFactory;\n  private _player: AnimationPlayer;\n  private _stylesLoaded = false;\n\n  private _COLLAPSE_ACTION_NAME = 'collapse';\n  private _EXPAND_ACTION_NAME = 'expand';\n\n  constructor(\n    private _el: ElementRef,\n    private _renderer: Renderer2,\n    _builder: AnimationBuilder\n  ) {\n    this._factoryCollapseAnimation = _builder.build(collapseAnimation);\n    this._factoryExpandAnimation = _builder.build(expandAnimation);\n  }\n\n  ngAfterViewChecked() {\n    this._stylesLoaded = true;\n  }\n\n  /** allows to manually toggle content visibility */\n  toggle(): void {\n    if (this.isExpanded) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  /** allows to manually hide content */\n  hide(): void {\n    this.isCollapsing = true;\n    this.isExpanded = false;\n    this.isCollapsed = true;\n    this.isCollapsing = false;\n\n    this.collapses.emit(this);\n\n    this.animationRun(this.isAnimated, this._COLLAPSE_ACTION_NAME)(() => {\n      this.collapsed.emit(this);\n      this._renderer.setStyle(this._el.nativeElement, 'display', 'none');\n    });\n  }\n  /** allows to manually show collapsed content */\n  show(): void {\n    this._renderer.setStyle(this._el.nativeElement, 'display', this._display);\n\n    this.isCollapsing = true;\n    this.isExpanded = true;\n    this.isCollapsed = false;\n    this.isCollapsing = false;\n\n    this.expands.emit(this);\n\n    this.animationRun(this.isAnimated, this._EXPAND_ACTION_NAME)(() => {\n      this.expanded.emit(this);\n    });\n  }\n\n  animationRun(isAnimated: boolean, action: string) {\n    if (!isAnimated || !this._stylesLoaded) {\n      return (callback: () => void) => callback();\n    }\n\n    this._renderer.setStyle(this._el.nativeElement, 'overflow', 'hidden');\n    this._renderer.addClass(this._el.nativeElement, 'collapse');\n\n    const factoryAnimation = (action === this._EXPAND_ACTION_NAME)\n      ? this._factoryExpandAnimation\n      : this._factoryCollapseAnimation;\n\n    if (this._player) {\n      this._player.destroy();\n    }\n\n    this._player = factoryAnimation.create(this._el.nativeElement);\n    this._player.play();\n\n    return (callback: () => void) => this._player.onDone(callback);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CollapseDirective } from './collapse.directive';\n\n@NgModule({\n  declarations: [CollapseDirective],\n  exports: [CollapseDirective]\n})\nexport class CollapseModule {\n  static forRoot(): ModuleWithProviders {\n    return { ngModule: CollapseModule, providers: [] };\n  }\n}\n"]}